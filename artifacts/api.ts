/* tslint:disable */
/**
 * This is generated by swagger-ts-client-gen - do not edit directly!
 */
import request from 'superagent';

export interface IRequestParams {
  originalParams?: any;
  method: string;
  url: string;
  queryParameters?: { [key: string]: string | boolean | number | Date | undefined };
  body?: {[key: string]: any};
}

type ReqModifier = (req: request.SuperAgentRequest) => void;

let baseApiUrl: string = (process.env.API_PROTOCOL || 'https') + "://" + process.env.API_HOST;
let requestModFn: ReqModifier | undefined;

export const updateAPIEndpoint = (params: { host: string; protocol?: string; }) => {
  baseApiUrl = `${params.protocol || 'https'}://${params.host}`;
};

export const setRequestModifier = (fn: (req: request.SuperAgentRequest) => void) => {
    requestModFn = fn;
};

export type TRequestExecReturn<T = any> = {
  promise: Promise<request.Response & { body: T }>;
  request: request.SuperAgentRequest;
  params: IRequestParams;
};

export function executeRequest<T = any>(params: IRequestParams, _requestModFn?: ReqModifier): TRequestExecReturn<T> {
  let req = request(params.method, params.url).set('Content-Type', 'application/json');

  if (requestModFn) {
    requestModFn(req);
  }

  if (_requestModFn) {
    _requestModFn(req);
  }

  const queryParameters = params.queryParameters;

  if (queryParameters) {
    Object.keys(queryParameters).forEach(key => {
      const value = queryParameters[key];
      if (Object.prototype.toString.call(value) === '[object Date]') {
        queryParameters[key] = (value as Date).toISOString();
      }
    });

    req = req.query(queryParameters);
  }
  
  if (params.body) {
    const keys = Object.keys(params.body);

    const fileKeys: Array<[string, any]> = [];
    const otherKeys: Array<[string, any]> = [];

    keys.forEach(k => {
      const value = params.body ? params.body[k] : undefined;
      const isFile = value instanceof File;

      if (value === undefined) return;

      if (isFile) {
        fileKeys.push([k, value]);
      } else {
        otherKeys.push([k, value]);
      }
    });

    if (fileKeys.length) {
      req.unset('Content-Type');
      fileKeys.forEach(([key, value]) => req.attach(key, value));
      otherKeys.forEach(([key, value]) => req.field(key, value));
    } else {
      req.send(params.body);
    }
  }
  
  const promise = new Promise<request.Response & { body: T }>((resolve, reject) => {
    req.end((error: any, response: request.Response) => {
      if (error || !response.ok) {
        if (response) {
          reject(response);
        } else {
          reject(error);
        }
      } else {
        resolve(response);
      }
    });
  });

  return { promise, request: req, params };
}



export interface Order {
id?: string;
petId?: string;
quantity?: number;
shipDate?: Date;
/**
 * Order Status
 */
status?: string;
complete?: boolean;
}


export interface User {
id?: string;
username?: string;
firstName?: string;
lastName?: string;
email?: string;
password?: string;
phone?: string;
/**
 * User Status
 */
userStatus?: number;
}


export interface Category {
id?: string;
name?: string;
}


export interface Tag {
id?: string;
name?: string;
}


export interface Pet {
id?: string;
category?: Category;
name: string;
photoUrls: any[];
tags?: Tag[];
/**
 * pet status in the store
 */
status?: string;
}


export interface ApiResponse {
code?: number;
type?: string;
message?: string;
}


export interface IpetAddPetParams {
/**
 * Pet object that needs to be added to the store
 */
body: Pet;
}

export interface IpetUpdatePetParams {
/**
 * Pet object that needs to be added to the store
 */
body: Pet;
}

export interface IpetFindPetsByStatusParams {
/**
 * Status values that need to be considered for filter
 */
status: any;
}

export interface IpetFindPetsByTagsParams {
/**
 * Tags to filter by
 */
tags: any;
}

export interface IpetGetPetByIdParams {
/**
 * ID of pet to return
 */
petId: number;
}

export interface IpetUpdatePetWithFormParams {
/**
 * ID of pet that needs to be updated
 */
petId: number;
/**
 * Updated name of the pet
 */
name?: string;
/**
 * Updated status of the pet
 */
status?: string;
}

export interface IpetDeletePetParams {
api_key?: string;
/**
 * Pet id to delete
 */
petId: number;
}

export interface IpetUploadFileParams {
/**
 * ID of pet to update
 */
petId: number;
/**
 * Additional data to pass to server
 */
additionalMetadata?: string;
/**
 * file to upload
 */
file?: any;
}

export interface IstorePlaceOrderParams {
/**
 * order placed for purchasing the pet
 */
body: Order;
}

export interface IstoreGetOrderByIdParams {
/**
 * ID of pet that needs to be fetched
 */
orderId: number;
}

export interface IstoreDeleteOrderParams {
/**
 * ID of the order that needs to be deleted
 */
orderId: number;
}

export interface IuserCreateUserParams {
/**
 * Created user object
 */
body: User;
}

export interface IuserCreateUsersWithArrayInputParams {
/**
 * List of user object
 */
body: User[];
}

export interface IuserCreateUsersWithListInputParams {
/**
 * List of user object
 */
body: User[];
}

export interface IuserLoginUserParams {
/**
 * The user name for login
 */
username: string;
/**
 * The password for login in clear text
 */
password: string;
}

export interface IuserGetUserByNameParams {
/**
 * The name that needs to be fetched. Use user1 for testing. 
 */
username: string;
}

export interface IuserUpdateUserParams {
/**
 * name that need to be updated
 */
username: string;
/**
 * Updated user object
 */
body: User;
}

export interface IuserDeleteUserParams {
/**
 * The name that needs to be deleted
 */
username: string;
}

export const petService = {


  addPet: function(_params: IpetAddPetParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'POST',
    url: `${baseApiUrl}/v2/pet`
  };

  requestParams.body = _params.body;
  return executeRequest<void>(requestParams, requestModFn);
},


  updatePet: function(_params: IpetUpdatePetParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'PUT',
    url: `${baseApiUrl}/v2/pet`
  };

  requestParams.body = _params.body;
  return executeRequest<void>(requestParams, requestModFn);
},

/**
 * Multiple status values can be provided with comma separated strings
 */

  findPetsByStatus: function(_params: IpetFindPetsByStatusParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'GET',
    url: `${baseApiUrl}/v2/pet/findByStatus`
  };

  requestParams.queryParameters = {
    status: _params.status,
  };
  return executeRequest<Pet[]>(requestParams, requestModFn);
},

/**
 * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */

  findPetsByTags: function(_params: IpetFindPetsByTagsParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'GET',
    url: `${baseApiUrl}/v2/pet/findByTags`
  };

  requestParams.queryParameters = {
    tags: _params.tags,
  };
  return executeRequest<Pet[]>(requestParams, requestModFn);
},

/**
 * Returns a single pet
 */

  getPetById: function(_params: IpetGetPetByIdParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'GET',
    url: `${baseApiUrl}/v2/pet/${_params.petId}`
  };
  return executeRequest<Pet>(requestParams, requestModFn);
},


  updatePetWithForm: function(_params: IpetUpdatePetWithFormParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'POST',
    url: `${baseApiUrl}/v2/pet/${_params.petId}`
  };
  return executeRequest<void>(requestParams, requestModFn);
},


  deletePet: function(_params: IpetDeletePetParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'DELETE',
    url: `${baseApiUrl}/v2/pet/${_params.petId}`
  };
  return executeRequest<void>(requestParams, requestModFn);
},


  uploadFile: function(_params: IpetUploadFileParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'POST',
    url: `${baseApiUrl}/v2/pet/${_params.petId}/uploadImage`
  };
  return executeRequest<ApiResponse>(requestParams, requestModFn);
},
}

export const storeService = {

/**
 * Returns a map of status codes to quantities
 */

  getInventory: function(requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    method: 'GET',
    url: `${baseApiUrl}/v2/store/inventory`
  };
  return executeRequest<any>(requestParams, requestModFn);
},


  placeOrder: function(_params: IstorePlaceOrderParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'POST',
    url: `${baseApiUrl}/v2/store/order`
  };

  requestParams.body = _params.body;
  return executeRequest<Order>(requestParams, requestModFn);
},

/**
 * For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10. Other values will generated exceptions
 */

  getOrderById: function(_params: IstoreGetOrderByIdParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'GET',
    url: `${baseApiUrl}/v2/store/order/${_params.orderId}`
  };
  return executeRequest<Order>(requestParams, requestModFn);
},

/**
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */

  deleteOrder: function(_params: IstoreDeleteOrderParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'DELETE',
    url: `${baseApiUrl}/v2/store/order/${_params.orderId}`
  };
  return executeRequest<void>(requestParams, requestModFn);
},
}

export const userService = {

/**
 * This can only be done by the logged in user.
 */

  createUser: function(_params: IuserCreateUserParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'POST',
    url: `${baseApiUrl}/v2/user`
  };

  requestParams.body = _params.body;
  return executeRequest<void>(requestParams, requestModFn);
},


  createUsersWithArrayInput: function(_params: IuserCreateUsersWithArrayInputParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'POST',
    url: `${baseApiUrl}/v2/user/createWithArray`
  };

  requestParams.body = _params.body;
  return executeRequest<void>(requestParams, requestModFn);
},


  createUsersWithListInput: function(_params: IuserCreateUsersWithListInputParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'POST',
    url: `${baseApiUrl}/v2/user/createWithList`
  };

  requestParams.body = _params.body;
  return executeRequest<void>(requestParams, requestModFn);
},


  loginUser: function(_params: IuserLoginUserParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'GET',
    url: `${baseApiUrl}/v2/user/login`
  };

  requestParams.queryParameters = {
    username: _params.username,
    password: _params.password,
  };
  return executeRequest<string>(requestParams, requestModFn);
},


  logoutUser: function(requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    method: 'GET',
    url: `${baseApiUrl}/v2/user/logout`
  };
  return executeRequest<void>(requestParams, requestModFn);
},


  getUserByName: function(_params: IuserGetUserByNameParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'GET',
    url: `${baseApiUrl}/v2/user/${_params.username}`
  };
  return executeRequest<User>(requestParams, requestModFn);
},

/**
 * This can only be done by the logged in user.
 */

  updateUser: function(_params: IuserUpdateUserParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'PUT',
    url: `${baseApiUrl}/v2/user/${_params.username}`
  };

  requestParams.body = _params.body;
  return executeRequest<void>(requestParams, requestModFn);
},

/**
 * This can only be done by the logged in user.
 */

  deleteUser: function(_params: IuserDeleteUserParams, requestModFn?: ReqModifier) {

  const requestParams: IRequestParams = {
    originalParams: _params,
    method: 'DELETE',
    url: `${baseApiUrl}/v2/user/${_params.username}`
  };
  return executeRequest<void>(requestParams, requestModFn);
},
}

